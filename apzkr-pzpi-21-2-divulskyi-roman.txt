Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії

КУРСОВА РОБОТА
ПОЯСНЮВАЛЬНА ЗАПИСКА
з навчальної дисципліни «Архітектура програмного забезпечення»
Тема роботи: Програмна система для керування приладами зрошення у сільському господарстві

	Студент гр. ПЗПІ-21-2                           ________________
          Дівульський Роман Дмитрович                     (підпис)
	
          Керівник роботи                                      ________________ 
          доц. Лещинський В. О.                                    (підпис)
						   

                                                                   Роботу захищено «__»________ 2024р. 
					                з оцінкою     __________________

	Комісія:
     доц. Лещинський В.О.
     доц. Лещинська І.О.
     ст. викл. Сокорчук І.П.


Харків 2024 р.
Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук Кафедра програмної інженерії
 Спеціальність 121 – Інженерія програмного забезпечення
Курс	3	Семестр	6	.
Навчальна дисципліна Архітектура програмного забезпечення


ЗАВДАННЯ
НА ЛАБОРАТОРНІ РОБОТИ СТУДЕНТОВІ


1. Тема проекту: Програмна система для керування приладами зрошення у сільському господарстві
2. Термін узгодження завдання з лабораторних робіт «_23_»_березня 2024р.
3. Термін здачі завдання з лабораторних робіт «31» травня 2024р..
4. Вихідні дані до проекту: методичні вказівки до виконання лабораторних робіт, вимоги до системи, аркуш завдання до лабораторних робіт, рекомендації що до розробки.
5. Зміст звітів з лабораторних робіт (перелік питань, що належить розробити): Vision and Scope document з детальним описом вимог до проекту, опис візуальної частини (frontend) яка буде реалізацією інтерфейсу для власника сільського господарства, мобільна версія яка буде реалізацією інтерфейсу для перевірки статусу зрошення, опис частини кодування (backend) яка буде реалізовувати основну логіку програми та взаємодію з базою даних, модульні частини (IoT) зі збором статистики про статус ґрунту та його характеристики.


КАЛЕНДАРНИЙ ПЛАН




№Основні етапи виконання
проекту в рамках лабораторних робіт    Термін виконання етапівПримітка1Видача	теми,	узгодження	і
затвердження теми23.03.20242Виконання	1	лабораторної
роботи30.03.20243Захист 1 лабораторної роботи31.03.20244Виконання	2	лабораторної
роботи29.04.20245Захист 2 лабораторної роботи30.04.20246Виконання	3	лабораторної
роботи19.05.20247Захист 3 лабораторної роботи20.05.20248Виконання	4	лабораторної
роботи30.05.20249Захист 4 лабораторної роботи31.05.202410Виконання	5	лабораторної
роботи9.06.202411Захист 5 лабораторної роботи10.06.202412Захист проекту10.06.2024

Дата видачі теми проекту у «30» березня 2024 р


Викладач лабораторних робіт
ст. викл. Сокорчук І.П.	 	
(підпис)


Завдання прийняв до виконання
ст.гр. ПЗПІ-21-2
Дівульський Р. Д.	 		
 (підпис)
РЕФЕРАТ


	Пояснювальна записка з курсової роботи: 28 сторінок, 3 рисунки, 8 джерел.
	АВТОМАТИЗАЦІЯ, ДІЛЯНКА, ЗВІТИ, ПРИЛАДИ ЗРОШЕННЯ, ПОЛЕ, СІЛЬСКЕ ГОСПОДАРСТВО, СТАТИСТИКА, BACKEND, IOT, FRONTEND.
	Об’єктом дослідження буде виступати програмна система, що розробляється а саме: Програмна система для керування приладами зрошення у сільському господарстві.
	Метою курсової роботи є розробка системи що автоматизує зрошення та облік сільських ділянок..
	Підхід до розробки включає в себе використання ASP.NET для створення серверної частини та ReactJS для створення динамічного та інтерактивного інтерфейсу користувача. Для зберігання та організації даних про ділянки, прилади, статус ґрунту та їх поточний стан ми використовуємо реляційну базу даних..
	Також буде створено пристрої IoT які матимуть змогу збирати статистику про ґрунт та надсилати її на сервер для подальшого аналізу статусу ділянок.

ЗМІСТ

ВСТУП	6
1 АНАЛІЗ ПРЕДМЕТНОЇ ГАЛУЗІ	8
2 ПОСТАНОВКА ЗАДАЧІ	10
2.1 Основний функціонал системи	10
2.2 Допущення та залежності	11
2.3 Релізи	12
2.4 Користувацькі обмеження	12
3.1 Back-end частина системи	14
3.2 Frontend-частина системи	16
3.3 IoT частина системи	18
4 СТРУКТУРА БАЗИ ДАНИХ	19
4.1 ER-моделювання	19
4.2 Реалізація БД	20
5 ОСОБЛИВОСТІ РЕАЛІЗАЦІЇ ПЗ	22
5.1 Backend	22
5.2 Frontend	23
5.3 IoT	23
6 ОСОБЛИВОСТІ ЗАСТОСУВАННЯ	25
ВИСНОВКИ	27




ВСТУП


     Створення системи зрошення є важливим етапом у сучасному сільському господарстві з огляду на зростаючі вимоги до водних ресурсів та необхідність оптимального використання землі для вирощування культур. Перед початком розробки такої системи необхідно провести глибокий аналіз різноманітних факторів, які впливають на сільське господарство.
     Один з ключових аспектів аналізу - це кліматичні умови. Різноманітність клімату в різних регіонах визначає необхідність використання різних систем зрошення. Наприклад, в сухих регіонах може бути доцільним використання крапельного зрошення для економії води, тоді як у вологих регіонах можуть бути вигідніші системи зрошення з розпиленням води.
     Також важливо враховувати тип ґрунту та рослинність. Різні типи ґрунтів мають різні властивості з утриманням та проникненням води, що впливає на необхідність регулювання інтенсивності поливу. Крім того, рослинність також впливає на необхідність води: деякі культури можуть потребувати більше вологи, ніж інші.
     Основною метою системи зрошення є забезпечення оптимального використання водних ресурсів. Це означає, що вода повинна надаватися рослинам тільки в тих місцях та часи, коли це дійсно необхідно для їх зростання та розвитку. Такий підхід дозволяє ефективно використовувати водні ресурси та запобігає їх надмірному використанню.
     Окрім ефективного використання водних ресурсів, система зрошення також може покращити врожайність та якість вирощених культур. Регулярне та точне зрошення сприяє рівномірному зростанню рослин, запобігає стресу від недостатнього зволоження або посухи, що може призвести до зниження врожайності та погіршення якості продукції.
     Необхідно також враховувати екологічні аспекти при розробці системи зрошення. Використання води та хімічних речовин для обробки може мати негативний вплив на водні екосистеми та біорізноманіття. Тому важливо вдосконалювати технології зрошення, щоб мінімізувати втрати води та забезпечити її якісне використання.
     Узагальнюючи, створення системи зрошення в сільському господарстві має великий потенціал для покращення ефективності виробництва, зменшення втрат врожаю та негативного впливу на навколишнє середовище. Продумана інфраструктура зрошення дозволяє досягти сталості виробництва, забезпечуючи потреби сільського господарства при мінімальних втратах водних ресурсів.


1 АНАЛІЗ ПРЕДМЕТНОЇ ГАЛУЗІ
     
     
     Автоматизація систем зрошення дійсно відкриває широкі можливості для підвищення ефективності та конкурентоспроможності сільськогосподарських підприємств. Додатково до вже зазначених переваг, автоматизація дозволяє покращити управління ресурсами та зробити процеси виробництва більш гнучкими та адаптивними до змінних умов.
     Однією з ключових переваг автоматизації є можливість підвищення точності та прогностичної здатності. Сучасні системи збору даних та аналізу, такі як сенсори ґрунту, метеостанції, та системи моніторингу, забезпечують постійне зібрання інформації про умови росту рослин. Аналіз цих даних дозволяє розробити оптимальні стратегії поливу, що відповідають конкретним потребам культур та умовам навколишнього середовища.
     У зв'язку зі зростанням усвідомленості про необхідність економії водних ресурсів, системи з автоматизованим контролем вологості землі та розподілом води стають все більш популярними серед сільськогосподарських підприємств. Це також допомагає зменшити негативний вплив на довкілля, зменшуючи витрати води та уникнення зайвого вологозабруднення.
     Однак, важливою складовою при впровадженні автоматизованих систем є їхні витрати та інтеграція з існуючими технологіями. Зокрема, важливо враховувати вартість розробки та впровадження системи, а також можливості її інтеграції з іншими агротехнічними рішеннями. Проте, існують багато компаній та стартапів, які пропонують рішення для автоматизації систем зрошення, зокрема використовуючи інтернет речей (IoT), штучний інтелект (AI) та аналітику даних.
     У підсумку, автоматизація систем зрошення має великий потенціал для підвищення ефективності та стійкості сільськогосподарського виробництва.

2 ПОСТАНОВКА ЗАДАЧІ
     
     
     Мета курсової роботи: розроблена Програмна система для керування приладами зрошення у сільському господарстві.
     
     
     2.1 Основний функціонал системи
     
     До основного функціоналу системи можна віднести:
     * Перегляд списку доступних приладів зрошення.
     * Пошук конкретного приладу зрошення за параметрами.
     * Перегляд детальної інформації про певний прилад зрошення.
     * Додавання нового приладу зрошення до системи.
     * Редагування інформації про прилад зрошення.
     * Видалення приладу зрошення з системи.
     * Моніторинг статусу та роботи приладів зрошення.
     * Перегляд історії використання та обслуговування приладів зрошення.
     * Генерація звітів про ефективність та роботу приладів зрошення.
     * Звернення до служби підтримки з питань технічної підтримки та консультацій.
     Запити власників, які будуть продавати систему керування приладами зрошення:
     * Додавання нового приладу зрошення до каталогу продуктів.
     * Редагування інформації про існуючі прилади зрошення.
     * Видалення приладу зрошення з каталогу продуктів.
     * Перегляд списку потенційних покупців або клієнтів.
     * Отримання звітів про продажі та статистики по приладах зрошення.
     * Проведення маркетингових кампаній та просування продуктів.
     * Забезпечення технічної підтримки клієнтам та покупцям.
     * Проведення навчання та консультацій з партнерами та клієнтами.
     * Аналіз ринку та конкурентної ситуації для оптимізації стратегій продажів.
     
     
     2.2 Допущення та залежності
     
     
     Продукт потребує унікальної назви, яка полегшить його ідентифікацію та пошук серед подібних рішень на ринку сільського господарства. Це допоможе привернути увагу користувачів та зробить продукт впізнаваним.
     Для належної функціональності необхідне стабільне підключення до Інтернету, щоб система могла отримувати актуальні дані про погоду та інші параметри для ефективного керування зрошувальними приладами.
     Система також потребує доступу до різноманітних даних, таких як метеорологічні дані та властивості ґрунту, для надання користувачам актуальних рекомендацій з управління зрошенням рослин.
     Користувачі повинні мати пристрої з підтримкою веб-браузера та стабільне Інтернет-підключення для взаємодії з системою управління зрошенням.
     Для забезпечення ефективної роботи в умовах великої кількості користувачів необхідні потужні сервери та стабільне Інтернет-підключення.
     Попит на систему управління зрошенням у сільському господарстві залежить від потреб сільськогосподарських підприємств у вдосконаленні процесів зрошення для збільшення врожайності та ефективності виробництва.
     
     
     2.3 Релізи
     
     
     Для першого релізу слід випустити серверну та інтерфейсну частину системи.
     Для наступних релізів слід розробити IoT частину системи.
     
     
     2.4 Користувацькі обмеження
     
     
     Враховуючи	предметну	область	проект	повинен	мати	наступні обмеження:
     * Прилад IoT повинен бути розміщений на створений ділянці.
     * Щоб розмістити прилад потрібно додати його до списку.
     * Прилад може надсилати статистику лише про певну ділянку.
     * Користувач повинен зареєструватися щоб почати  користуватися системою.


3 ФОРМУВАННЯ ВИМОГ ДО ПРОГРАМНОЇ СИСТЕМИ

     
     
     Програмну систему можна поділити на 3 частини:
     * IoT.
     * Frontend.
     * Backend.
     Наведемо діаграму розгортання (див. рис. 1.1) для того щоб продемонструвати зв’язки між компонентами програми.
     

Рисунок 1.1 – Діаграма розгортання

     Наведемо детальний опис кожного компоненту системи в наступних розділах.
     3.1 Back-end частина системи
     
     
     Серверна частина програмної системи для керування приладами зрошення у сільському господарстві є центральним елементом, що забезпечує обробку та аналіз даних, а також управління пристроями зрошення на великих територіях. При розробці серверної частини були використані сучасні технології та інструменти з метою забезпечення надійності, масштабованості та ефективності системи.
     Для реалізації серверної частини використовувалися такі технології:
     – мова програмування C# [3]. Весь серверний код був написаний мовою програмування C#, що забезпечило високу швидкість розробки та ефективність виконання;
     – ASP.NET Core. Для створення веб-сервера та обробки HTTP-запитів був використаний ASP.NET Core, що надає масштабовану та високопродуктивну інфраструктуру для розробки веб-застосунків;
     – Entity Framework Core з підтримкою MS SQL Server. Для роботи з базою даних використовувався Entity Framework Core, який забезпечує високорівневий доступ до даних та автоматизоване ведення міграцій. В якості бази даних використовувалась MS SQL Server для надійного зберігання та управління даними;
     – JSON [1]. Для обміну даними між клієнтами та сервером використовувався формат даних JSON (JavaScript Object Notation), який є легким та зручним для використання.
     Використання цих технологій дозволило створити потужну та надійну серверну частину системи, яка забезпечує ефективне управління приладами зрошення та аналіз даних у сільському господарстві.

     3.2 Frontend-частина системи


     Система для керування приладами зрошення у сільському господарстві надає користувачам доступ до різноманітних сторінок, які дозволяють управляти та моніторити функціонування різних аспектів системи. Нижче наведено опис кожної сторінки інтерфейсу:
     – Сторінка фермерських ділянок. На цій сторінці користувач може переглянути список фермерських ділянок, їх розміри та поточний стан. Користувач може додавати нові ділянки, видаляти чи редагувати інформацію про існуючі ділянки;
     – Сторінка пристроїв зрошення. На цій сторінці користувач може переглянути список пристроїв зрошення, їх стан та параметри. Користувач може додавати нові пристрої, видаляти чи редагувати інформацію про існуючі пристрої;
     – Сторінка розкладів зрошення. На цій сторінці користувач може переглянути список розкладів зрошення для кожної фермерської ділянки. Користувач може створювати нові розклади, редагувати або видаляти існуючі;
     – Сторінка сенсорів. На цій сторінці користувач може переглянути список сенсорів, їхнє розташування та поточні показники. Користувач може додавати нові сенсори, видаляти чи редагувати інформацію про існуючі сенсори;
     – Сторінка ресурсів води. На цій сторінці користувач може переглянути інформацію про доступні ресурси води, їх обсяги та статус. Користувач може оновлювати дані про ресурси води або додавати нові дані;
     – Сторінка інформації про погодні умови. На цій сторінці користувач може переглядати графіки погодних умов за всі періоди. Графік показує температуру, кількість опадів та вологість повітря за кожен день. Користувач може змінювати період аналізу та налаштовувати відображення параметрів на графіку.
     Під час розробки клієнтської частини програмної системи для керування приладами зрошення у сільському господарстві, використовувалися сучасні технології та інструменти для створення зручного та ефективного інтерфейсу користувача. Ось перелік використаних технологій:
     * React.js: Обрано React.js як основний фреймворк для розробки користувацького інтерфейсу. Він забезпечує ефективну та динамічну роботу веб-додатків та спрощує організацію компонентів та їх взаємодію.
     * TypeScript (TS): Використаний TypeScript для поліпшення робочого процесу та забезпечення більшої безпеки в процесі розробки. Він дозволяє створювати строго типізований код, що полегшує виявлення помилок та підвищує читабельність коду.
     * MobX: Для управління станом додатку та забезпечення реактивності обрано MobX. Він дозволяє організувати стан додатку та автоматизувати оновлення інтерфейсу при зміні даних.
     * React Router: Використано React Router для реалізації навігації між сторінками та роутингу. Він надає зручний інтерфейс для створення маршрутів та переходів між різними частинами додатку.
     * Axios: Для виконання HTTP-запитів до сервера використано бібліотеку Axios, яка забезпечує простий та зручний інтерфейс для взаємодії з API серверної частини.
     * Chart.js: Для відображення графіків погодних умов використано бібліотеку Chart.js, яка надає різноманітні можливості для створення інтерактивних та привабливих графіків.
     Ці технології були обрані з огляду на їхню ефективність, розширюваність та популярність в розробці сучасних веб-додатків. Вони допомогли створити зручний та функціональний інтерфейс, що відповідає потребам користувачів.

     
     3.3 IoT частина системи
     
     
     Розглянемо функціонал, який був розроблений за допомогою WinForms та мови програмування C#. Ця програма призначена для налаштування пристрою та надсилання інформації на сервер. Вона надає користувачу можливість введення даних в сенсори та взаємодії з ними за допомогою відповідних кнопок. Це дозволяє емулювати роботу реальних датчиків.
     Коли датчики збирають інформацію, ці дані групуються в об'єкт відповідного класу. Цей об'єкт містить інформацію, яка буде надіслана на сервер для подальшої обробки. Наприклад, це може бути клас, що представляє дані про рівень вологості, температуру, рівень освітленості тощо.
     Після групування даних в об'єкт відповідного класу, вони передаються на сервер для подальшої обробки або зберігання. Цей процес відбувається за допомогою мережевого з'єднання і може включати передачу даних через HTTP-запити, використання веб-служб або інших механізмів комунікації.
     Отже, програма WinForms на C# дозволяє користувачам взаємодіяти з датчиками, збирати та групувати дані, а потім надсилати їх на сервер для подальшої обробки або аналізу.
     

4 СТРУКТУРА БАЗИ ДАНИХ
     4.1 ER-моделювання


     Наведемо ER діаграму сутностей бази даних(див. рис. 1.2)


Рисунок 1.2 – ER-діаграма
     
     Зважаючи на тему "Програмна система для керування приладами зрошення у сільському господарстві", наведено перелік атрибутів для сутностей:
     – фермерська ділянка: id (первинний ключ), назва, площа, локація;
     – пристрій зрошення: id (первинний ключ), назва, тип, витрати води, статус, фермерська ділянка;
     – розклад зрошення: id (первинний ключ), дата початку, дата кінця, затримка, пристрій зрошення;
     – сенсор: id (первинний ключ), назва, тип, локація, фермерська ділянка;
     – ресурс води: id (первинний ключ), назва, місткість, поточний рівень, локація, фермерська ділянка;
     – інформація про погодні умови: id (первинний ключ), дата та час, температура, вологість, опади, локація.
     У базі даних для програмної системи керування приладами зрошення у сільському господарстві, існують різноманітні зв'язки між сутностями. Зв'язки:
     – пристрій зрошення та фермерська ділянка має зв’язок один до багатьох, тобто ділянка може мати багато пристроїв;
     – розклад зрошення та фермерська ділянка має зв’язок один до багатьох, тобто ділянка може мати у собі багато розкладів;
     – сенсор та фермерська ділянка має зв’язок багато до багатьох, тобто ділянка має багато сенсорів;
     – ресурси води та фермерська ділянка має зв’язок багато до багатьох, тобто ділянка має багато кількості ресурсів води.


     4.2 Реалізація БД


В результаті, отримали базу даних з наступними таблицями та колонками:
     * FarmPlot (Id, Name, Area, Location).
     * IrrigationDevice(Id, Name, Type, WaterFlowRate, Status, FarmPlotId).
     * IrrigationSchedule(Id, StartTime, EndTime, Frequency, IrrigationDeviceId).
     * Sensor(Id, Name, Type, Location, FarmPlotId).
     * WaterResource (Id, Name, Capacity, CurrentLevel, Location, FarmPlotId).
     * WeatherCondition(Id, DateTime, Temperature, Humidity, Rainfall, Location).
База даних буде створена за допомогою технології MS SQL Server.


5 ОСОБЛИВОСТІ РЕАЛІЗАЦІЇ ПЗ
     5.1 Backend
     
     
     Серверна частина програмної системи побудована з використанням мови C# та фреймворку ASP.NET. Проект розроблено у вигляді API, що надає можливість взаємодії з додатком за допомогою HTTP запитів. Архітектура API ґрунтується на принципах REST специфікації.
     Для зручності конфігурації застосунку використано стандартну систему конфігурації, яка вбудована в технологію ASP.NET. Всі налаштування знаходяться у файлі Program.cs.
     Для роботи з базою даних використовується ORM Entity Framework. За допомогою нього сконфігуровано підключення до бази даних та відносини з таблицями прямо у вихідному коді.
     Архітектура програмної системи включає такі складові:
     - Моделі, які представляють сутності доменної області та їх властивості.
     - Контролери, які обробляють HTTP запити та відповідають на них.
     - Сервіси, які містять бізнес-логіку та виконують операції над моделями.
     - Репозиторії, що забезпечують доступ до даних та взаємодію з базою даних.
     Ця архітектура дозволяє побудувати масштабовану та ефективну програмну систему з чіткою розділеною відповідальністю між компонентами.


     5.2 Frontend


     Frontend частина програмної системи була розроблена з використанням фреймворка React.js, що забезпечує динамічний та ефективний інтерфейс користувача.
     Для організації структури коду використано модульну архітектуру, що сприяє чіткій ізоляції компонентів програми та полегшує їх розвиток і підтримку.
     Основними компонентами застосунку є сторінки, які відображаються в залежності від шляху, обраного користувачем у браузері. Навігація між сторінками забезпечена за допомогою посилань.
     Для побудови графіків використано бібліотеку Chart.js, яка реалізує візуалізацію даних на HTML Canvas. Щоб уникнути зайвого збору сміття при оновленні компонентів, використано useRef для зберігання посилання на графік. Крім того, функція canvasCallback викликається після монтування компонента та відповідає за побудову графіку на HTML Canvas за допомогою бібліотеки Chart.js.
     
     
     5.3 IoT 
     
     
     В цьому програмному забезпеченні реалізовано емуляцію роботи Інтернету речей (IoT). Додаток, розроблений за допомогою Windows Forms, взаємодіє з пристроями Інтернету речей, надсилаючи запити до відповідного API. Це дозволяє отримувати дані про поточний стан пристроїв та записувати їх у базу даних для забезпечення моніторингу та збереження актуальних даних.
     Додаток, побудований на основі Windows Forms, використовує HTTP запити для спілкування з сервером. Він відправляє запити до відповідного API на сервері для отримання та записування даних про поточний стан пристроїв. Це включає в себе запити на отримання даних, оновлення інформації та виконання дій залежно від відповідей сервера. Такий підхід дозволяє ефективно взаємодіяти з сервером, обмінюючись необхідною інформацією для відображення та збереження поточного стану пристроїв.


6 ОСОБЛИВОСТІ ЗАСТОСУВАННЯ
     6.1 Веб додаток
     
     
     Зручний і доступний спосіб взаємодії з системою для користувачів - це головна мета веб-сайту, розробленого для звичайних клієнтів. Його інтерфейс структурований з особливою увагою та має інтуїтивно зрозумілу організацію, щоб забезпечити легкість в користуванні. Головна ідея полягає в тому, щоб допомогти клієнтам виконувати потрібні дії без зайвих зусиль.
     Наведемо use case діаграму щоб показати можливості користувача в системі(див. рис. 1.3).
     

Рисунок 1.3 – Use case діаграма
     
     На діаграмі можна побачити можливості звичайного користувача. Також діаграма включає інформацію про взаємодію IoT пристрою з системою, і в наслідок цієї взаємодії користувач може отримувати статистику про статус ґрунту.


ВИСНОВКИ
     
     
     Для успішної реалізації проекту був розроблений комплексний додаток, який складається з чотирьох ключових компонент: бекенду, веб-додатку, мобільного додатку та IoT застосунку. Кожна з цих складових відіграє важливу роль у функціонуванні системи.
     Для створення ефективного та інтерактивного користувацького інтерфейсу веб-додатку використовувалася популярна бібліотека React. Її використання дозволило забезпечити зручність користування та швидкість реакції на дії користувачів.
     Бекенд частину додатку було реалізовано з використанням .NET Web API. Цей вибір технології забезпечив потужний інструментарій для серверної розробки, що дозволило оптимізувати обробку запитів та забезпечити стабільну роботу системи.
     Для реалізації IoT застосунку використовувалася технологія Windows Forms. Вона надала зручний інтерфейс для взаємодії з пристроями та отримання даних про стан системи. Це дозволило досягти ефективної роботи з IoT-пристроями та інтеграції їх функціональності в загальну систему.
     Використання цих технологій сприяло створенню додатку, який відповідає вимогам, забезпечує швидку та ефективну роботу. Такий підхід дозволяє забезпечити користувачам надійність та зручність використання системи.


ПЕРЕЛІК ДЖЕРЕЛ ПОСИЛАННЯ
     
     
     1. Charts.js URL: https://react-chartjs-2.js.org/. (дата звернення 12.05.2024)
     2. TypeScript is JavaScript with syntax for types URL: https://www.typescriptlang.org/. (дата звернення 02.05.2024)
     3. Axios URL: https://axios-http.com/ru/docs/intro. (дата звернення 22.04.2024)
     4. React.js URL: https://react.dev/. (дата звернення 12.05.2024)
     5. Серіалізація JSON та XML на веб-API ASP.NET. URL: https://learn.microsoft.com/ru-ru/aspnet/web-api/overview/formats-and-model-binding/json-and-xml-serialization. (дата звернення 23.04.2024)
     6. Центр документації Entity Framwork URL: https://learn.microsoft.com/ru-ru/ef/core/get-started/overview/first-app?tabs=netcore-cli. (дата звернення 09.05.2024)
     7. Документація з мови C# URL: https://learn.microsoft.com/ru-ru/dotnet/csharp/. (дата звернення 12.05.2024)
     8. Документація ASP.NET URL: https://learn.microsoft.com/ru-ru/aspnet/core/?view=aspnetcore-8.0. (дата звернення 09.05.2024)
     
2


